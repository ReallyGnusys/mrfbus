#!/bin/bash

if [ $# -lt 1 ] ; then
  echo "Usage $0  <build|run|runtests|test|setup>"
  exit
fi

[ -e .bashrc ] && echo "running local .bashrc" && source .bashrc


[ -z "$MRFBUS_HOME" ] && echo "MRFBUS_HOME not defined" && exit 0



LOGDIR=var/log
FIFODIR=var/fifo


if [ $1 == setup ] ; then
    [ ! -d $LOGDIR ] && echo "creating $LOGDIR" && mkdir -p $LOGDIR
    [ ! -d $FIFODIR ] && echo "creating $FIFODIR" && mkdir -p $FIFODIR

    HOSTFIFO=${FIFODIR}/1-0-in
    STUBFIFO=${FIFODIR}/0-app-in
    APPFIFO=${FIFODIR}/0-app-str
    rm -f ${HOSTFIFO} && mkfifo -m 600 ${HOSTFIFO}
    rm -f ${STUBFIFO} && mkfifo -m 600 ${STUBFIFO}
    rm -f ${APPFIFO} && mkfifo -m 600 ${APPFIFO}
    if [ ! -e ./mrf.prj ] ; then
        echo "Getting mrj.prj"
        if [ $# -lt 2 ]  ; then
            echo "no mrf.prj found in current dir and no param to setup .. e.g. test"
            exit -1

        fi
        src=${MRFBUS_HOME}/${2}_mrf.prj

        if [ -e $src ] ; then
            cp $src ./mrf.prj
            echo "Copied $src to ./mrf.prj"
        else
            echo "ERROR : could not find $src"
            exit -1
        fi

    fi

    echo "setting up third party statics"

    # check if request module installed
    python -c "import requests"

    [ $? -ne 0 ] && echo "python requests module not found : please install" && exit -1

    python ${MRFBUS_HOME}/land/thirdparty_static.py


    echo "building venv"

    virtualenv venv
    source venv/bin/activate

    echo "installing requirements"
    pip install -r ${MRFBUS_HOME}/land/requirements.txt



    exit 0
fi


if [ ! -e ./mrf.prj ] ; then
  echo "no mrf.prj found in current dir"
  exit -1

fi

if [ $1 == build ] ; then
    mode=build
    pushd $MRFBUS_HOME
    make testsetup
    popd
elif  [ $1 == run ] ; then
   mode=run
   pids=""
elif  [ $1 == runtests ] ; then
   mode=run
   runtests=yes
   pids=""
else
   echo "illegal mode $1 - try build, run or runtests"
   exit -1;
fi

declare -i valid=0

while read -r LINE
do

 #echo "read line $LINE"

 valid=0
 read -r -a fld <<< "$LINE"

 if  [ "${fld[0]}" == "MRFNET" ] ; then
     mrfnet=${fld[1]}
 elif  [ "${fld[0]}" == "SERVER" ] ; then
     server=${fld[1]}
 elif [ "${fld[0]}" == "DEVICE" ] ; then
    #echo "DEVICE line"
    for tok in "${fld[@]:1}" ; do
      [ -n "$(echo $tok | grep '^MRFID=')" ]  && mrfid=${tok##MRFID=}
      [ -n "$(echo $tok | grep '^APP=')" ]  && app=${tok##APP=}
      [ -n "$(echo $tok | grep '^ARCH=')" ]  && arch=${tok##ARCH=}

    done

    [ -n "$mrfid" ] && [ -n "$app" ] &&  [ -n "$mrfnet" ] && valid=1

    if [ $valid -eq 1 ] ; then
      echo "valid device line detected app $app mrfid $mrfid"
      dn=${app}_${mrfid}
      if [ $mode == build ] ; then
          rm -rf $dn
          mkdir $dn
          mf=${dn}/Makefile
          echo "MRFNET=$mrfnet" > $mf
          echo "MRFPROJ="$(pwd) >> $mf
          for tok in "${fld[@]:1}" ; do
             echo ${tok} >> $mf
          done
          echo "" >> $mf
          echo 'include ${MRFBUS_HOME}/Makefile.inc'  >> $mf

          pushd $dn
          make



          #| tee  make.log

          mrv=$?

          #echo "make done mrv $?  $mrv"

          popd
          [ $mrv -ne  0  ]  && echo "make failed" && exit $mrv


      elif [ $mode == run ] && [ $arch == lnx ]  ; then

          echo "starting lnx device $dn"
          #stdbuf -oL -i0 ${dn}/bin/${dn} >  /dev/null & #${LOGDIR}/${dn}.log  &
          stdbuf -oL -i0 ${dn}/bin/${dn} >  ${LOGDIR}/${dn}.log  &
          pid=$!
          echo "pid is $pid"
          pids=${pids}" "$pid
          if [ $mrfid == "0x01" ] ; then
              hostlog=${LOGDIR}/${dn}.log
              echo "Host log is $hostlog"
          fi
      fi
    fi


 fi
done < ./mrf.prj

function exit_tst {
 for pid in "$1" ; do
   echo "killing pid $pid"
 done
 echo "adios"
 exit

}

function kill_devs {
 for pid in $pids ; do
   echo "killing pid $pid"
   kill -9 $pid
 done

}

if [ $mode == build ] ; then


   if [ -n "${server}" ] ; then

      [ ! -e ./${server} ] && [ ! -e ${MRFBUS_HOME}/land/${server} ] && echo "no server ${server} found" && kill_devs && exit 1


      [ ! -e  ./${server} ] && echo "copying server from ${MRFBUS_HOME}/land/${server}" && cp ${MRFBUS_HOME}/land/${server} ./${server}
      [ ! -e  ./install.py ] && echo "copying install.py from ${MRFBUS_HOME}/land/install_example.py" && cp ${MRFBUS_HOME}/land/install_example.py ./install.py
   fi
   echo "build complete" && exit 0

fi


if [ -n "${server}" ] ; then

   echo "" > ${LOGDIR}/mrfland.log
   sleep 1
   echo "starting server ./${server}"
   source v3env/bin/activate
   export PYTHONPATH=$(pwd):${MRFBUS_HOME}/land
   echo "PYTHONPATH=$PYTHONPATH"
   if [ $# -lt 2 ]  ; then
       echo "piping server to /dev/null"
       stdbuf -oL  python  ./${server} --mrfnet=${mrfnet} > /dev/null&
   else
       echo "running server in foreground"
       python  ./${server} --mrfnet=${mrfnet}
   fi



   pid=$!
   echo "pid is $pid"
   pids=${pids}" "$pid

fi



function ctrl_c() {
        echo "** Trapped CTRL-C killing mfrbus instances .. nicely if possible"
        kill_devs "$pids"
        echo "adios"
        exit 0
}


if [ -n "$runtests" ] ; then
   echo "Pause for server to start before running unit tests.."
   sleep 4

   #echo "hostlog.."
   #cat $hostlog
   echo "Start unit tests.."


   python ${MRFBUS_HOME}/land/core_tests.py TestMrfBus.test02_device_tests   #  | tee  ${LOGDIR}/core_tests.log

   rv=$?

   echo "tests completed : rv=$rv"
   kill_devs
   if [ $rv == 0 ] ; then

    echo "PASSED"
   else
     echo "FAILED"
   fi
   exit $rv
fi


trap ctrl_c INT

echo "mrfbus instances running ... ctrl C to quit"
while [ 1 ] ; do
  sleep 1

done

echo "quitting"
echo "mrf_proj adios at $(date)"
